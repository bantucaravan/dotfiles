[user]
	name = Noah Chasek-Macfoy
	email = bantucaravan@gmail.com


[core]
	editor = code --wait
[diff]
    tool = default-difftool
[difftool "default-difftool"]
    cmd = code --wait --diff $LOCAL $REMOTE
[merge]
  tool = code
[mergetool "code"]
  cmd = code --wait --merge $REMOTE $LOCAL $BASE $MERGED

[alias]
  # description: file diffs from destination to incoming, but only for files that were modified from merge base to incoming. I.e.  destination file paths that will be affected in an auto merge. 
  # NB: This does NOT include files that do NOT exist in destination commit but do exist in incoming commit, thus would be created/added by the auto-merge.
  # NB: results do NOT include files that are renamed (or just simply present?) in the destination commit and not present in incoming commit. However, in this case a merge conflict will occur.
  # NB: this is different, more inclusive, than files that were modified in both dest and incom. Modified in both dest and incom are sites of potential merge conflict, but exclude modified in only incoming thus overwriting destination in an auto-merge. 
  # NB: quotes are to handle branch names with spaces or special characters.
  # USAGE: git id-auto-merge <destination> <incoming>
  id-auto-merge = "!f() { git diff --stat \"$1\" \"$2\" -- $(git diff --stat --name-only $(git merge-base \"$1\" \"$2\") \"$2\"); }; f"


  # https://claude.ai/chat/5eb3b570-84ad-443e-ae69-0b1a0793ce69
  # USAGE: git diffstatus source_commit destination_commit
  # Shows files changed only in source, only in destination, and in both
  # TODO: maybe I should display the diffs from 1 to 2 onces I've collected the 3 sets, not the diffs from base to 1 or 2 (maybe a 3rd status for the both changed, that is the diff 1 to 2?)
  # TODO: think about handling renamings smartly
  # TODO: loss aversion, does it make sense to simply accept a one sided deletion (and actually isn't a 2 sided deletion really a no-diff)
  diffstatus = "!bash -c '\
      base=$(git merge-base \"$1\" \"$2\") && \
      echo \"Modified in $1 only:\" && \
      files_in_1=$(comm -23 \
          <(git diff --name-only \"$base\" \"$1\" | sort) \
          <(git diff --name-only \"$base\" \"$2\" | sort)) && \
      if [ ! -z \"$files_in_1\" ]; then \
          git diff --name-status \"$base\" \"$1\" -- $files_in_1; \
      fi && \
      echo && \
      echo \"Modified in $2 only:\" && \
      files_in_2=$(comm -23 \
          <(git diff --name-only \"$base\" \"$2\" | sort) \
          <(git diff --name-only \"$base\" \"$1\" | sort)) && \
      if [ ! -z \"$files_in_2\" ]; then \
          git diff --name-status \"$base\" \"$2\" -- $files_in_2; \
      fi && \
      echo && \
      echo \"Modified in both:\" && \
      files_in_both=$(comm -12 \
          <(git diff --name-only \"$base\" \"$1\" | sort) \
          <(git diff --name-only \"$base\" \"$2\" | sort)) && \
      if [ ! -z \"$files_in_both\" ]; then \
          while IFS= read -r file; do \
              status1=$(git diff --name-status \"$base\" \"$1\" -- \"$file\" | cut -f1); \
              status2=$(git diff --name-status \"$base\" \"$2\" -- \"$file\" | cut -f1); \
              printf \"%-8s -> %-8s %s\\n\" \"$status1\" \"$status2\" \"$file\"; \
          done <<< \"$files_in_both\"; \
      fi\
  ' -"
  
  goodlog = "log --graph  --oneline --all"
	




# [filter "lfs"]
# 	clean = git-lfs clean -- %f
# 	smudge = git-lfs smudge -- %f
# 	process = git-lfs filter-process
# 	required = true
