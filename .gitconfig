[user]
	name = Noah Chasek-Macfoy
	email = bantucaravan@gmail.com


[core]
	editor = code --wait
[diff]
    tool = default-difftool
[difftool "default-difftool"]
    cmd = code --wait --diff $LOCAL $REMOTE
[difftool]
	prompt = false
[merge]
    tool = code
[mergetool "code"]
    cmd = code --wait --merge $REMOTE $LOCAL $BASE $MERGED

[alias]
    # USAGE: git id-auto-merge  <incoming> <destination>
    # DOC: file diffs from destination to incoming, but only for files that were modified from merge base to incoming. I.e.  destination file paths that will be affected in an auto merge. (basically is it is set 1 and set 3 from git diffstatus below)
    # NB: This does NOT include files that do NOT exist in destination commit but do exist in incoming commit, thus would be created/added by the auto-merge.
    # NB: results do NOT include files that are renamed (or just simply present?) in the destination commit and not present in incoming commit. However, in this case a merge conflict will occur.
    # NB: this is different, more inclusive, than files that were modified in both dest and incom. Modified in both dest and incom are sites of potential merge conflict, but exclude modified in only incoming thus overwriting destination in an auto-merge. 
    # NB: quotes are to handle branch names with spaces or special characters.
    id-auto-merge = "!f() { git diff --stat \"$2\" \"$1\" -- $(git diff --stat --name-only $(git merge-base \"$2\" \"$1\") \"$1\"); }; f"

    diffstatus = "!bash ~/dotfiles/git-diffstatus.sh"
  
    graphlog = log --graph --all

    manual-premerge = "!bash ~/dotfiles/git-manual-premerge.sh"
	
# [filter "lfs"]
# 	clean = git-lfs clean -- %f
# 	smudge = git-lfs smudge -- %f
# 	process = git-lfs filter-process
# 	required = true

[mergetool]
	keepBackup = false
[push]
    # automatically does push --set-upstream when no remote tracking branch exists
	autoSetupRemote = true
[fetch]
	prune = true
